# Day 3: Binary Diagnostic

## Dependencies

```elixir
Mix.install(
  [
    {:aoc_common, github: "rob-brown/AdventOfCode2021"}
  ],
  force: false
)
```

## Part 1

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the **power consumption**.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the **gamma rate** and the **epsilon rate**). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

Each bit in the gamma rate can be determined by finding the **most common bit in the corresponding position** of all numbers in the diagnostic report. For example, given the following diagnostic report:

```
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
```

Considering only the first bit of each number, there are five `0` bits and seven `1` bits. Since the most common bit is `1`, the first bit of the gamma rate is `1`.

The most common second bit of the numbers in the diagnostic report is `0`, so the second bit of the gamma rate is `0`.

The most common value of the third, fourth, and fifth bits are `1`, `1`, and `0`, respectively, and so the final three bits of the gamma rate are `110`.

So, the gamma rate is the binary number `10110`, or `22` in decimal.

The epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is `01001`, or `9` in decimal. Multiplying the gamma rate (`22`) by the epsilon rate (`9`) produces the power consumption, **`198`**.

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. **What is the power consumption of the submarine?** (Be sure to represent your answer in decimal, not binary.)

<!-- livebook:{"livebook_object":"cell_input","name":"Input File","type":"text","value":"input.txt"} -->

```elixir
input_path = IO.gets("Input File: ") |> String.trim() |> Path.expand(__DIR__)
```

```elixir
defmodule Part1 do
  use AocCommon

  def run(path) do
    gamma =
      path
      |> Input.lines()
      |> Enum.to_list()
      |> gamma_rate({[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0})

    epsilon = gamma |> Bitwise.bnot() |> Bitwise.band(0xFFF)

    gamma * epsilon
  end

  defp gamma_rate([], {bit_counts, total_count}) do
    half = div(total_count, 2)

    bit_counts
    |> Enum.reverse()
    |> Enum.with_index()
    |> Enum.map(fn {x, n} ->
      if x > half do
        Bitwise.bsl(1, n)
      else
        0
      end
    end)
    |> Enum.sum()
  end

  defp gamma_rate([line | rest], {bit_counts, total_count}) do
    new_counts =
      line
      |> String.graphemes()
      |> Enum.zip(bit_counts)
      |> Enum.map(fn
        {"1", count} ->
          count + 1

        {"0", count} ->
          count
      end)

    gamma_rate(rest, {new_counts, total_count + 1})
  end
end

Part1.run(input_path)
```

## Part 2

Next, you should verify the **life support rating**, which can be determined by multiplying the **oxygen generator rating** by the **CO2 scrubber rating**.

Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and **consider just the first bit** of those numbers. Then:

* Keep only numbers selected by the bit criteria for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
* If you only have one number left, stop; this is the rating value for which you are searching.
* Otherwise, repeat the process, considering the next bit to the right.

The bit criteria depends on which type of rating value you want to find:

* To find **oxygen generator rating**, determine the **most common** value (`0` or `1`) in the current bit position, and keep only numbers with that bit in that position. If `0` and `1` are equally common, keep values with a `1` in the position being considered.
* To find **CO2 scrubber rating**, determine the least common value (`0` or `1`) in the current bit position, and keep only numbers with that bit in that position. If `0` and `1` are equally common, keep values with a `0` in the position being considered.

For example, to determine the oxygen generator rating value using the same example diagnostic report from above:

* Start with all 12 numbers and consider only the first bit of each number. There are more `1` bits (7) than `0` bits (5), so keep only the 7 numbers with a `1` in the first position: `11110`, `10110`, `10111`, `10101`, `11100`, `10000`, and `11001`.
* Then, consider the second bit of the `7` remaining numbers: there are more `0` bits (4) than `1` bits (3), so keep only the 4 numbers with a `0` in the second position: `10110`, `10111`, `10101`, and `10000`.
* In the third position, three of the four numbers have a `1`, so keep those three: `10110`, `10111`, and `10101`.
* In the fourth position, two of the three numbers have a `1`, so keep those two: `10110` and `10111`.
* In the fifth position, there are an equal number of `0` bits and `1` bits (one each). So, to find the **oxygen generator rating**, keep the number with a `1` in that position: `10111`.
* As there is only one number left, stop; the **oxygen generator rating** is `10111`, or **`23`** in decimal.

Then, to determine the CO2 scrubber rating value from the same example above:

* Start again with all 12 numbers and consider only the first bit of each number. There are fewer `0` bits (5) than `1` bits (7), so keep only the 5 numbers with a `0` in the first position: `00100`, `01111`, `00111`, `00010`, and `01010`.
* Then, consider the second bit of the 5 remaining numbers: there are fewer `1` bits (2) than `0` bits (3), so keep only the 2 numbers with a `1` in the second position: `01111` and `01010`.
* In the third position, there are an equal number of `0` bits and `1` bits (one each). So, to find the **CO2 scrubber rating**, keep the number with a `0` in that position: `01010`.
* As there is only one number left, stop; the **CO2 scrubber rating** is `01010`, or **`10`** in decimal.

Finally, to find the life support rating, multiply the oxygen generator rating (`23`) by the CO2 scrubber rating (`10`) to get **`230`**.

Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together. **What is the life support rating of the submarine?** (Be sure to represent your answer in decimal, not binary.)

```elixir
defmodule Part2 do
  use AocCommon

  def run(path) do
    bits_list =
      path
      |> Input.lines()
      |> Enum.to_list()
      |> Enum.map(&string_to_bits/1)

    oxygen(bits_list) * co2(bits_list)
  end

  defp oxygen(lines, position \\ 0)

  defp oxygen([line], _) do
    bit_list_to_int(line)
  end

  defp oxygen(lines, position) do
    {ones, zeros} = Enum.split_with(lines, &(Enum.at(&1, position) == 1))

    if Enum.count(ones) >= Enum.count(zeros) do
      oxygen(ones, position + 1)
    else
      oxygen(zeros, position + 1)
    end
  end

  defp co2(lines, position \\ 0)

  defp co2([line], _) do
    bit_list_to_int(line)
  end

  defp co2(lines, position) do
    {ones, zeros} = Enum.split_with(lines, &(Enum.at(&1, position) == 1))

    if Enum.count(zeros) <= Enum.count(ones) do
      co2(zeros, position + 1)
    else
      co2(ones, position + 1)
    end
  end

  defp string_to_bits(string) do
    string |> String.graphemes() |> Enum.map(&String.to_integer/1)
  end

  defp bit_list_to_int(bits) do
    bits
    |> Enum.reverse()
    |> Enum.with_index()
    |> Enum.map(fn {x, n} ->
      Bitwise.bsl(x, n)
    end)
    |> Enum.sum()
  end
end

Part2.run(input_path)
```

## Test

```elixir
ExUnit.start(autorun: false)

defmodule Day3Tests do
  use ExUnit.Case, async: true

  setup do
    [path: Path.expand("input.txt", __DIR__)]
  end

  test "part1", %{path: path} do
    assert Part1.run(path) == 2_743_844
  end

  test "part2", %{path: path} do
    assert Part2.run(path) == 6_677_951
  end
end

ExUnit.run()
```
